# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestWhiteboxCrudInline():
  def setup_method(self, method):
    
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_whiteboxCrudInline(self):
    # Test name: whitebox_CrudInline
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://localhost:7010/")
    time.sleep(0.6)
    # 2 | setWindowSize | 1382x784 | 
    self.driver.set_window_size(1382, 784)
    time.sleep(0.6)
    # 3 | click | linkText=Product | 
    self.driver.find_element(By.LINK_TEXT, "Product").click()
    time.sleep(0.6)
    # 4 | click | linkText=New Product | 
    self.driver.find_element(By.LINK_TEXT, "New Product").click()
    time.sleep(0.6)
    # 5 | click | id=Name | 
    self.driver.find_element(By.ID, "Name").click()
    time.sleep(0.6)
    # 6 | type | id=Name | Caneta
    self.driver.find_element(By.ID, "Name").send_keys("Caneta")
    time.sleep(0.6)
    # 7 | type | id=Brand | Bic
    self.driver.find_element(By.ID, "Brand").send_keys("Bic")
    time.sleep(0.6)
    # 8 | select | id=Category | label=Phones
    dropdown = self.driver.find_element(By.ID, "Category")
    time.sleep(0.6)
    dropdown.find_element(By.XPATH, "//option[. = 'Phones']").click()
    time.sleep(0.6)
    # 9 | select | id=Category | label=Computers
    dropdown = self.driver.find_element(By.ID, "Category")
    time.sleep(0.6)
    dropdown.find_element(By.XPATH, "//option[. = 'Computers']").click()
    time.sleep(0.6)
    # 10 | select | id=Category | label=Accessories
    dropdown = self.driver.find_element(By.ID, "Category")
    time.sleep(0.6)
    dropdown.find_element(By.XPATH, "//option[. = 'Accessories']").click()
    time.sleep(0.6)
    # 11 | type | id=Price | 2
    self.driver.find_element(By.ID, "Price").send_keys("2")
    time.sleep(0.6)
    # 12 | type | id=Description | Caneta esferográfica
    self.driver.find_element(By.ID, "Description").send_keys("Caneta esferográfica")
    time.sleep(0.6)
    # 13 | click | css=.pb-3 > .row | 
    self.driver.find_element(By.CSS_SELECTOR, ".pb-3 > .row").click()
    time.sleep(0.6)
    # 14 | click | css=.btn-primary | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    time.sleep(0.6)
    # 15 | click | linkText=Edit | 
    self.driver.find_element(By.LINK_TEXT, "Edit").click()
    time.sleep(0.6)
    # 16 | click | id=Name | 
    self.driver.find_element(By.ID, "Name").click()
    time.sleep(0.6)
    # 17 | type | id=Name | Caneta Importada
    self.driver.find_element(By.ID, "Name").send_keys("Caneta Importada")
    time.sleep(0.6)
    # 18 | click | id=Price | 
    self.driver.find_element(By.ID, "Price").click()
    time.sleep(0.6)
    # 19 | type | id=Price | 3
    self.driver.find_element(By.ID, "Price").send_keys("3")
    time.sleep(0.6)
    # 20 | click | css=.btn-primary | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    time.sleep(0.6)
    # 22 | click | linkText=Delete | 
    self.driver.find_element(By.LINK_TEXT, "Delete").click()
    time.sleep(0.6)
    # 23 | assertConfirmation | Are you sure? | 
    assert self.driver.switch_to.alert.text == "Are you sure?"
    time.sleep(0.6)
    # 24 | webdriverChooseOkOnVisibleConfirmation |  | 
    self.driver.switch_to.alert.accept()
    time.sleep(0.6)

    
  
